[{"categories":null,"content":"Backgound: As developers, we often want to create an service system that can run on background and then launch a service every system startup. These sevice can be anything, maybe you have python scripts, bash scripts, or node js script, or maybe like this example we create a custome service for Metabase (https://www.metabase.com/start/). Metabase can be launched from user terminal by typing java -jar metabase.jar but every user logout or close the terminal metabase will stopped immediately. ","date":"2023-02-16","objectID":"/how-to-create-custom-service-systemd/:1:0","tags":null,"title":"How to Create Custom Service Systemd on Linux","uri":"/how-to-create-custom-service-systemd/"},{"categories":null,"content":"Goal: Our goal is simple we want to create services for Metabase then control it using systemd for example systemctl start metabase.service ","date":"2023-02-16","objectID":"/how-to-create-custom-service-systemd/:2:0","tags":null,"title":"How to Create Custom Service Systemd on Linux","uri":"/how-to-create-custom-service-systemd/"},{"categories":null,"content":"Step 1: Goto systemd folder Find your user defined services. Ubuntu was at /etc/systemd/system/ ","date":"2023-02-16","objectID":"/how-to-create-custom-service-systemd/:3:0","tags":null,"title":"How to Create Custom Service Systemd on Linux","uri":"/how-to-create-custom-service-systemd/"},{"categories":null,"content":"Step 2: Create a text file with your favorite text editor name it whatever_you_want.service ","date":"2023-02-16","objectID":"/how-to-create-custom-service-systemd/:4:0","tags":null,"title":"How to Create Custom Service Systemd on Linux","uri":"/how-to-create-custom-service-systemd/"},{"categories":null,"content":"Step 3: Put following Template to the file whatever_you_want.service [Unit] Description=Metabase Daemon [Service] PIDFile=/run/metabase.pid WorkingDirectory=/usr/local/bin/metabase/ User=ubuntu Group=ubuntu #RUN COMMAND HERE ExecStart=/usr/bin/java -jar -Xmx512m /usr/local/bin/metabase/metabase.jar Restart=on-failure RestartSec=30 PrivateTmp=true StandardOutput=file:/var/log/sf-app.log StandardError=file:/var/log/sf-app.err.log [Install] WantedBy=multi-user.target ","date":"2023-02-16","objectID":"/how-to-create-custom-service-systemd/:5:0","tags":null,"title":"How to Create Custom Service Systemd on Linux","uri":"/how-to-create-custom-service-systemd/"},{"categories":null,"content":"Explanation Unit: Every service is called unit and give description with name for this example is Metabase Daemon PID: process identifier, and location is on /run folder. Working directory: Where your application folder is located User \u0026 Group: user and group your operating system ExecStart: Command to execute. You must specify full path to the executable. For example if our application is running using java my_app.jar you must specify /usr/bin/java. if you not sure where the executable is located you can run which java on terminal Standart Output and Standart Error: For logging purposes every your application returned value to user and every your application facing errors Multi-user.target: Normally defines a system state where all network services are started up and the system will accept logins, but a local GUI is not started.so for simplicity here the rule of thumb. Use multi-user.target if your application is not GUI and use graphical.target if your application is GUI ","date":"2023-02-16","objectID":"/how-to-create-custom-service-systemd/:5:1","tags":null,"title":"How to Create Custom Service Systemd on Linux","uri":"/how-to-create-custom-service-systemd/"},{"categories":null,"content":"Init sudo apt install python3-pip python3 -m venv env source bin/activate requirements.tx # create pip3 freeze --local \u003e requirements.txt # load pip3 install -r requirements.txt ","date":"2023-02-16","objectID":"/python-cheatsheet/:0:1","tags":null,"title":"Python get started for Network Engineer","uri":"/python-cheatsheet/"},{"categories":null,"content":"Snippets: SSH - Paramiko import re import paramiko import time # \\ndisplay ip interface brief | no-more iplist = ['172.16.0.21', '172.16.0.25', '172.16.0.22'] for host in iplist: cmd = 'display int desc | no-more\\ndisplay ip int br | no-more' promt = 'N' ssh_client = paramiko.SSHClient() ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy()) ssh_client.connect(hostname=host, username='username_here', password='password_here', port='2135',look_for_keys=False) stdin, stdout, stderr = ssh_client.exec_command(cmd) stdin.write(promt + '\\n') out_byte = stdout.read() out_str = out_byte.decode() SSH - Netmiko - send_command (Read) more example https://github.com/ktbyers/netmiko/blob/develop/EXAMPLES.md from netmiko import ConnectHandler from getpass import getpass from pprint import pprint # device type list: https://github.com/ktbyers/netmiko/blob/develop/PLATFORMS.md cisco1 = { \"device_type\": \"cisco_ios\", \"host\": \"cisco1.lasthop.io\", \"username\": \"pyclass\", \"password\": getpass(), } command = \"show ip int brief\" with ConnectHandler(**cisco1) as net_connect: # Use TextFSM to retrieve structured data output = net_connect.send_command(command, use_textfsm=True) print() pprint(output) print() SSH - Netmiko - send_config_set (Write) more example https://github.com/ktbyers/netmiko/blob/develop/EXAMPLES.md config_commands = [ 'logging buffered 20000', 'logging buffered 20010', 'no logging console' ] output = net_connect.send_config_set(config_commands) print(output) SSH - Netmiko expect_string from netmiko import ConnectHandler from getpass import getpass cisco1 = { \"device_type\": \"cisco_ios\", \"host\": \"cisco1.lasthop.io\", \"username\": \"pyclass\", \"password\": getpass(), } command = \"del flash:/test4.txt\" net_connect = ConnectHandler(**cisco1) # CLI Interaction is as follows: # cisco1#delete flash:/testb.txt # Delete filename [testb.txt]? # Delete flash:/testb.txt? [confirm]y # Use 'send_command' and the 'expect_string' argument (note, expect_string uses # RegEx patterns). Netmiko will move-on to the next command when the # 'expect_string' is detected. # strip_prompt=False and strip_command=False make the output # easier to read in this context. output = net_connect.send_command( command_string=command, expect_string=r\"Delete filename\", strip_prompt=False, strip_command=False ) output += net_connect.send_command( command_string=\"\\n\", expect_string=r\"confirm\", strip_prompt=False, strip_command=False ) output += net_connect.send_command( command_string=\"y\", expect_string=r\"#\", strip_prompt=False, strip_command=False ) net_connect.disconnect() print() print(output) print() SSH - Netmiko send_command_timing (Handle Prompt) from netmiko import ConnectHandler from getpass import getpass cisco1 = { \"device_type\": \"cisco_ios\", \"host\": \"cisco1.lasthop.io\", \"username\": \"pyclass\", \"password\": getpass(), } command = \"del flash:/test3.txt\" net_connect = ConnectHandler(**cisco1) # CLI Interaction is as follows: # cisco1#delete flash:/testb.txt # Delete filename [testb.txt]? # Delete flash:/testb.txt? [confirm]y # Use 'send_command_timing' which is entirely delay based. # strip_prompt=False and strip_command=False make the output # easier to read in this context. output = net_connect.send_command_timing( command_string=command, strip_prompt=False, strip_command=False ) if \"Delete filename\" in output: output += net_connect.send_command_timing( command_string=\"\\n\", strip_prompt=False, strip_command=False ) if \"confirm\" in output: output += net_connect.send_command_timing( command_string=\"y\", strip_prompt=False, strip_command=False ) net_connect.disconnect() print() print(output) print() Regex import re string_example = \"this is string\" patern = ( r'(.*\\d{1,100}#.*)' ) xx = re.findall(patern, string_example) NTC / TextFSM [[ntc_template textfsm]] https://github.com/ramadlana/ntc-templates ntc-templates Unparsed data: Interface Status Protocol Description Vl1 admin down down Vl99 up up 10.20.99.0_Switch_mgmt_VLAN Gi0/1 down down D3 USER Gi0/2 down down D","date":"2023-02-16","objectID":"/python-cheatsheet/:1:0","tags":null,"title":"Python get started for Network Engineer","uri":"/python-cheatsheet/"}]